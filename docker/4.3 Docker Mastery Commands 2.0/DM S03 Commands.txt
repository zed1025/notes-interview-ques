# Creating and Using Containers Like a Boss



## Check Our Docker Install and Config

- check version of docker client and server(engine)
    docker version

- shows config and options about the docker engine
    docker info

- shows a list of all the commands you can use in docker. Management commands are different. They have the format `docker management-command sub-command [options]`
    docker

- New way of running container, e.g. of management command
    docker container run

- old way of running containers, both can be used.
    docker run



## Starting a Nginx Web Server

- runs a nginx container, first 80 is the localhost port, second 80 is port inside container
    docker container run --publish 80:80 nginx

- detach tells docker to run nginx in background
    docker container run --publish 80:80 --detach nginx

- list all `running` containers
    docker container ls
    [OLD]docker ps

- stopping a container 690 is the initial chars of the container id
    docker container stop 690
    [OLD]docker stop 690

- show all containers, running and stopped
    docker container ls -a

- if you do not specify --name, a random name is generated by docker.
    docker container run --publish 80:80 --detach --name webhost nginx

    docker container ls -a

- see logs for container named 'webhost'
    docker container logs webhost

    docker container top

- Display the running processes of the container 'webhost'
    docker container top webhost

- use --help to find the list of all commands and options you can try on the command
    docker container --help

    docker container ls -a

- deleting multiple containers at the same time, if the container is running it will give error, stop container first then remove, or use force remove
    docker container rm 63f 690 ode

    docker container ls

- removing container even if its in running
    docker container rm -f 63f

    docker container ls -a



## Container VS. VM: It's Just a Process

- starts a mongodb container
    docker run --name mongo -d mongo

    docker ps

- list processes inside the mongo container
    docker top mongo

- you can also view the processes running inside container from the host
    ps -aux | grep mongod

    docker stop mongo

    docker ps

    docker top mongo

- start a stopped container
    docker start mongo

    docker ps

    docker top mongo



## Assignment Answers: Manage Multiple Containers

    docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql

    docker container logs db

    docker container run -d --name webserver -p 8080:80 httpd

    docker ps

    docker container run -d --name proxy -p 80:80 nginx

    docker ps

    docker container ls

    docker container stop TAB COMPLETION

    docker ps -a

    docker container ls -a

    docker container rm

    docker ps -a

- shows list of images on the local cache
    docker image ls



## What's Going On In Containers: CLI Process Monitoring

    docker container run -d --name nginx nginx

    docker container run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql

    docker container ls

    docker container top mysql

    docker container top nginx

- details about 'mysql' containers configurations. Show metadata about the container
    docker container inspect mysql

    docker container stats --help

- performance stats for all containers
    docker container stats

    docker container ls



## Getting a Shell Inside Containers: No Need for SSH

    docker container run -help

- 'it' run the container in interactive mode. We specify the program we run when we get inside the container. By default it is 'nginx -g daemon...' but we changed it to 'bash'. Now when we close exit the shell(using `exit`) the container will also stop because it has nothing running inside it.
    docker container run -it --name proxy nginx bash

    docker container ls

    docker container ls -a

- here we dont specify the name of the program we want to run when the container starts in the interactive mode. It will still work because `bash` is default program for ubuntu. When we exit bash the container will stop.
    docker container run -it --name ubuntu ubuntu

    docker container ls

    docker container ls -a

    docker container start --help

- start the stopped container with `bash` running
    docker container start -ai ubuntu

    docker container exec --help

- getting a shell inside a running container. When you exit the bash, mysql container will still be running, this is because 'exec' runs an additional process on a running container
    docker container exec -it mysql bash

    docker container ls

    docker pull alpine

    docker image ls

- `docker: Error response from daemon: OCI runtime create failed: container_linux.go:370: starting container process caused: exec: "bash": executable file not found in $PATH: unknown.` You get this error because bash is not installed on alpine by default
    docker container run -it alpine bash

- use this instead of bash
    docker container run -it alpine sh



## Docker Networks: Concepts for Private and Public Comms in Containers

    docker container run -p 80:80 --name webhost -d nginx

- shows which ports are forwarding traffic to which ports on containers
    docker container port webhost

- `format` flag is used to find specific information within the docker inspect. Here it is used to find the ip address of the container
    docker container inspect --format '{{ .NetworkSettings.IPAddress }}' webhost



## Docker Networks: CLI Management of Virtual Networks
- shows all the networks that have been created
    docker network ls

- among other things it shows the list of containers attached to this network
    docker network inspect bridge

    docker network ls

- creates a new network with the bridge driver, since its the default
    docker network create my_app_net

    docker network ls

    docker network create --help

- attaching container to a network, while creating the container
    docker container run -d --name new_nginx --network my_app_net nginx

    docker network inspect my_app_net

    docker network --help

- connecting an existing container to a network
    docker network connect <network_id> <container_id>

    docker container inspect TAB COMPLETION

    docker container disconnect <network_id> <container_id>

    docker container inspect



## Docker Networks: DNS and How Containers Find Each Other

    docker container ls

    docker network inspect TAB COMPLETION

    docker container run -d --name my_nginx --network my_app_net nginx

    docker container inspect TAB COMPLETION

    docker container exec -it my_nginx ping new_nginx

    docker container exec -it new_nginx ping my_nginx

    docker network ls

    docker container create --help



## Assignment Answers: Using Containers for CLI Testing

    docker container run --rm -it centos:7 bash

    docker ps -a

    docker container run --rm -it ubuntu:14.04 bash

    docker ps -a



## Assignment Answers: DNS Round Robin Testing

    docker network create dude

    docker container run -d --net dude --net-alias search elasticsearch:2

    docker container ls

    docker container run --rm -- net dude alpine nslookup search

    docker container run --rm --net dude centos curl -s search:9200

    docker container ls

    docker container rm -f TAB COMPLETION

- Create a new Deployment with the below attributes using your own deployment definition file.
Name: httpd-frontend; 
Replicas: 3; 
Image: httpd:2.4-alpine
	kubectl create deployment --image=httpd:2.4-alpine --replicas=3 --dry-run=client httpd-frontend -o yaml > alpine-deployment.yaml



- Start a hazelcast pod and set labels "app=hazelcast" and "env=prod" in the
container
	kubectl run hazelcast --image=hazelcast/hazelcast --labels="app=hazelcast,env=prod"



- Create a service redis-service to expose the redis application within the cluster on port 6379. Use imperative commands.
	kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml > redis-service-defintion.yaml
	kubectl apply -f redis-service-definition.yaml



- Create a deployment named webapp using the image kodekloud/webapp-color with 3 replicas. Try to use imperative commands only. Do not create definition files.
	kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3



- Create a new pod called custom-nginx using the nginx image and expose it on container port 8080.
	kubectl run custom-nginx --image=nginx --port=8080



- Create a new namespace called dev-ns.
	kubectl create namespace dev-ns


- Create a new deployment called redis-deploy in the dev-ns namespace with the redis image. It should have 2 replicas.
	kubectl create deployment redis-deploy --image=redis --namespace=dev-ns --replicas=2



- Create a pod called httpd using the image httpd:alpine in the default namespace. Next, create a service of type ClusterIP by the same name (httpd). The target port for the service should be 80. Try to do this with as few steps as possible.
	kubectl run httpd --image=httpd:alpine --namespace=default
	kubectl expose pod httpd --port=80 --name httpd --dry-run=client -o yaml > httpd-service-definition.yaml
	kubectl apply -f httpd-service-definition.yaml

	Method 2
	kubectl run https --image=httpd:alpine --port=80 --expose=true


- # Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists.
	kubectl taint nodes foo dedicated:NoSchedule-	

- What is the Common Name (CN) configured on the Kube API Server Certificate?
	cat /etc/kubernetes/manifests/kube-apiserver.yaml
	Look for: --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
	openssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout

- What is the Common Name (CN) configured on the ETCD Server certificate?
	cat /etc/kubernetes/manifests/etcd.yaml
	Look for: --cert-file=/etc/kubernetes/pki/etcd/server.crt
	openssl x509 -in /etc/kubernetes/pki/etcd/server.crt -text -noout

- How long, from the issued date, is the Root CA Certificate valid for? (File: /etc/kubernetes/pki/apiserver.crt)
	openssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout
	
- How long, from the issued date, is the Root CA Certificate valid for? (File: /etc/kubernetes/pki/ca.crt)
	openssl x509 -in /etc/kubernetes/pki/ca.crt -text -noout
	

- Kubectl suddenly stops responding to your commands. Check it out! Someone recently modified the /etc/kubernetes/manifests/etcd.yaml file (You are asked to investigate and fix the issue. Once you fix the issue wait for sometime for kubectl to respond. Check the logs of the ETCD container.)
	- In /etc/kubernetes/manifests/etcd.yaml the path for certificate should be changed from --cert-file=/etc/kubernetes/pki/etcd/server-certificate.crt to --cert-file=/etc/kubernetes/pki/etcd/server.crt


- kubectl create secret docker-registry private-reg-cred --docker-server=myprivateregistry.com:5000 --docker-username=dock_user --docker-password=dock_password --docker-email=dock_user@myprivateregistry.com



